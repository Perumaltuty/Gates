if else statement
`timescale 1ns / 1ps
module mux8_1_if_else(input D0,D1,D2,D3,D4,D5,D6,D7, input [2:0]S,output reg Y);
always @( * )
begin
if (S==3'b000) Y=D0;
else if (S==3'b001) Y=D1;
else if (S==3'b010) Y=D2;
else if (S==3'b011) Y=D3;
else if (S==3'b100) Y=D4;
else if (S==3'b101) Y=D5;
else if (S==3'b110) Y=D6;
else if (S==3'b111) Y=D7;
else Y=0;
end
endmodule



case statement
`timescale 1ns / 1ps
module mux8_1_Case_statement(input D0,D1,D2,D3,D4,D5,D6,D7, input [2:0]S,output reg Y);
always @ (*)
begin
case (S)
3'b000 : Y = D0;
3'b001 : Y = D1;
3'b010 : Y = D2;
3'b011 : Y = D3;
3'b100 : Y = D4;
3'b101 : Y = D5;
3'b110 : Y = D6;
3'b111 : Y = D7;
default : Y = 1'b0;
endcase
end
endmodule


data flow
`timescale 1ns / 1ps
module mux_8_1_data(input D0,D1,D2,D3,D4,D5,D6,D7, input [2:0]S,output Y);
wire inv0, inv1, inv2; // Inverter outputs.
wire a0, a1, a2, a3, a4, a5, a6, a7 ; // AND gates outputs.
not not_0 (inv0, S[0]); //// Inverters.
not not_1 (inv1, S[1]);
not not_2 (inv2, S[2]);
and and_0 (a0, inv2, inv1, inv0,D0); //// 3-input AND gates.
and and_1 (a1, inv2, inv1, S[0],D1);
and and_2 (a2, inv2, S[1], inv0,D2);
and and_3 (a3, inv2, S[1], S[0],D3);
and and_4 (a4, S[2], inv1, inv0,D4);
and and_5 (a5, S[2], inv1, S[0],D5);
and and_6 (a6, S[2], S[1], inv0,D6);
and and_7 (a7, S[2], S[1], S[0],D7);
or or_0(Y, a0, a1, a2, a3, a4, a5, a6, a7); //// 8-input OR gate.
endmodule


test bench 
`timescale 1ns / 1ps
module TB_mux8_3;
reg D0,D1,D2,D3,D4,D5,D6,D7;
reg [2:0] S;
wire Y;
mux8_1_if_else TB(.D0(D0),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.D5(D5),.D6(D6),.D7(D7), .S(S),.Y(Y));
initial begin
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 000;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 001;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 010;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 011;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 100;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 101;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 110;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8;
#10 S= 111;
{D0,D1,D2,D3,D4,D5,D6,D7}=$random%8; #10$stop;
end
endmodule
