STRUCTURAL
`timescale 1ns / 1ps
module encodert_struc(input [7:0] I,output  [2:0] Y );
or(Y[2],I[4],I[5],I[6],I[7]);
or(Y[1],I[2],I[3],I[6],I[7]);
or(Y[0],I[1],I[3],I[5],I[7]);
endmodule


BEHACVIOURAL
`timescale 1ns / 1ps
module encoder_behavioural(input [7:0] I,output reg [2:0] Y );
always@(*)
begin
case(I)
8'b00000001: Y<= 3'b000;
8'b00000010: Y <= 3'b001;
8'b00000100: Y <= 3'b010;
8'b00001000: Y <= 3'b011;
8'b00010000: Y <= 3'b100;
8'b00100000: Y <= 3'b101;
8'b01000000: Y <= 3'b110;
8'b10000000: Y <= 3'b111;
default: Y<= 3'bxxx;
endcase
end
endmodule

TEST BENCH
`timescale 1ns / 1ps
module TB_encoder;
reg [7:0] I;
wire [2:0] Y;
encoder_struc T(.I(I),.Y(Y));
initial begin
 I= 8'b00000001;
#10 I=8'b00000010;
#10 I=8'b00000100;
#10 I=8'b00001000;
#10 I=8'b00010000;
#10 I=8'b00100000;
#10 I=8'b01000000;
#10 I=8'b10000000;
#10$stop;
end
endmodule


